00000000                            		include	"Debugger.asm"
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; MD Debugger and Error Handler v.2.6
00000000                            ;
00000000                            ;
00000000                            ; Documentation, references and source code are available at:
00000000                            ; - https://github.com/vladikcomper/md-modules
00000000                            ;
00000000                            ; (c) 2016-2024, Vladikcomper
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugger definitions
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugger customization
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; Enable debugger extensions
00000000                            ; Pressing A/B/C on the exception screen can open other debuggers
00000000                            ; Pressing Start or unmapped button returns to the exception
00000000 =00000001                  DEBUGGER__EXTENSIONS__ENABLE:			equ		1		; 0 = OFF, 1 = ON (default)
00000000                            
00000000                            ; Whether to show SR and USP registers in exception handler
00000000 =00000000                  DEBUGGER__SHOW_SR_USP:					equ		0		; 0 = OFF (default), 1 = ON
00000000                            
00000000                            ; Debuggers mapped to pressing A/B/C on the exception screen
00000000                            ; Use 0 to disable button, use debugger's entry point otherwise.
00000000                            DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER:	equ		MDDBG__Debugger_AddressRegisters	; display address register symbols
00000000                            DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER:	equ		MDDBG__Debugger_Backtrace			; display exception backtrace
00000000 =00000000                  DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER:	equ		0		; disabled
00000000                            
00000000                            ; Selects between 24-bit (compact) and 32-bit (full) offset format.
00000000                            ; This affects offset format next to the symbols in the exception screen header.
00000000                            ; M68K bus is limited to 24 bits anyways, so not displaying unused bits saves screen space.
00000000                            ; Possible values:
00000000                            ; - MDDBG__Str_OffsetLocation_24bit (example: 001C04 SomeLoc+4)
00000000                            ; - MDDBG__Str_OffsetLocation_32bit (example: 00001C04 SomeLoc+4)
00000000                            DEBUGGER__STR_OFFSET_SELECTOR:			equ		MDDBG__Str_OffsetLocation_24bit
00000000                            
00000000                            
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000D0                  str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr		equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; -----------------------------
00000000                            ; Error handler control flags
00000000                            ; -----------------------------
00000000                            
00000000                            ; Screen appearence flags
00000000 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
00000000 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
00000000 =00000004                  _eh_hide_caller		equ	$04		; don't guess and print caller in the header (in SGDK and C/C++ projects naive caller detection isn't reliable)
00000000                            
00000000                            ; Advanced execution flags
00000000                            ; WARNING! For experts only, DO NOT USE them unless you know what you're doing
00000000 =00000020                  _eh_return			equ	$20
00000000 =00000040                  _eh_enter_console	equ	$40
00000000 =00000080                  _eh_align_offset	equ	$80
00000000                            
00000000                            
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            
00000000                            	; Debugger macros will be semi-broken if whitespace isn't supported.
00000000                            	; Since version 2.6, MD Debugger recommends projects to set "/o ws+" option to avoid
00000000                            	; cryptic errors raised by assembler failing to register spaces between arguments.
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Creates assertions for debugging
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	assert.b	d0, eq, #1		; d0 must be $01, or else crash
00000000                            ;	assert.w	d5, pl			; d5 must be positive
00000000                            ;	assert.l	a1, hi, a0		; assert a1 > a0, or else crash
00000000                            ;	assert.b	(MemFlag).w, ne	; MemFlag must be set (non-zero)
00000000                            ;	assert.l	a0, eq, #Obj_Player, MyObjectsDebugger
00000000                            ;
00000000                            ; NOTICE:
00000000                            ;	All "assert" saves and restores CCR so it's fully safe
00000000                            ;	to use in-between any instructions.
00000000                            ;	Use "_assert" instead if you deliberatly want to disbale
00000000                            ;	this behavior and safe a few cycles.
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            assert:	macro	src, cond, dest, console_program
00000000                            	; Assertions only work in DEBUG builds
00000000                            	if def(__DEBUG__)
00000000                            		move.w	sr, -(sp)
00000000                            		_assert.\0	<\src>, <\cond>, <\dest>, <\console_program>
00000000                            		move.w	(sp)+, sr
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Same as "assert", but doesn't save/restore CCR (can be used to save a few cycles)
00000000                            _assert:	macro	src, cond, dest, console_program
00000000                            	; Assertions only work in DEBUG builds
00000000                            	if def(__DEBUG__)
00000000                            	if strlen("\dest")
00000000                            		cmp.\0	\dest, \src
00000000                            	else
00000000                            		tst.\0	\src
00000000                            	endif
00000000                            	pusho
00000000                            	opt l-
00000000                            		b\cond\		@skip\@
00000000                            	popo
00000000                            	if strlen("\dest")
00000000                            		RaiseError	"Assertion failed:%<endl,pal2>> assert.\0 %<pal0>\src,%<pal2>\cond%<pal0>,\dest%<endl,pal1>Got: %<.\0 \src>", \console_program
00000000                            	else
00000000                            		RaiseError	"Assertion failed:%<endl,pal2>> assert.\0 %<pal0>\src,%<pal2>\cond%<endl,pal1>Got: %<.\0 \src>", \console_program
00000000                            	endif
00000000                            	pusho
00000000                            	opt l-
00000000                            	@skip\@:
00000000                            	popo
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Raises an error with the given message
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	RaiseError	"Something is wrong"
00000000                            ;	RaiseError	"Your D0 value is BAD: %<.w d0>"
00000000                            ;	RaiseError	"Module crashed! Extra info:", YourMod_Debugger
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError:	macro	string, console_program, opts
00000000                            	pea		*(pc)				; this simulates M68K exception
00000000                            	move.w	sr, -(sp)			; ...
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		MDDBG__ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")			; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			jsr		\console_program										; ... an aligned "jsr" instruction that calls console program itself
00000000                            			jmp		MDDBG__ErrorHandler_PagesController
00000000                            		else
00000000                            			jmp		\console_program										; ... an aligned "jmp" instruction that calls console program itself
00000000                            		endif
00000000                            	else
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)			; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even															; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		MDDBG__ErrorHandler_PagesController
00000000                            		else
00000000                            			dc.b	\opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            			even								; ... in case \opts argument is empty or skipped
00000000                            		endif
00000000                            	endif
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Console interface
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	Console.Run	YourConsoleProgram
00000000                            ;	Console.Write "Hello "
00000000                            ;	Console.WriteLine "...world!"
00000000                            ;	Console.WriteLine "Your data is %<.b d0>"
00000000                            ;	Console.WriteLine "%<pal0>Your code pointer: %<.l a0 sym>"
00000000                            ;	Console.SetXY #1, #4
00000000                            ;	Console.SetXY d0, d1
00000000                            ;	Console.Sleep #60 ; sleep for 1 second
00000000                            ;	Console.Pause
00000000                            ;
00000000                            ; NOTICE:
00000000                            ;	All "Console.*" calls save and restore CCR so they are fully
00000000                            ;	safe to use in-between any instructions.
00000000                            ;	Use "_Console.*" instead if you deliberatly want to disbale
00000000                            ;	this behavior and safe a few cycles.
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            Console:	macro
00000000                            	; "Console.Run" doesn't have to save/restore CCR, because it's a no-return
00000000                            	if strcmp("\0","run")|strcmp("\0","Run")
00000000                            		_Console.\0	<\1>, <\2>
00000000                            	; Other Console calls do save/restore CCR
00000000                            	else
00000000                            		move.w	sr, -(sp)
00000000                            		_Console.\0	<\1>, <\2>
00000000                            		move.w	(sp)+, sr
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Same as "Console", but doesn't save/restore CCR (can be used to save a few cycles)
00000000                            _Console	macro
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		pusho
00000000                            		opt l-
00000000                            		; If we have any arguments in string, use formatted string function ...
00000000                            		if (__sp>0)
00000000                            			movem.l	a0-a2/d7, -(sp)
00000000                            			lea		4*4(sp), a2
00000000                            			lea		@str\@(pc), a1
00000000                            			jsr		MDDBG__Console_\0\_Formatted
00000000                            			movem.l	(sp)+, a0-a2/d7
00000000                            			if (__sp>8)
00000000                            				lea		__sp(sp), sp
00000000                            			else
00000000                            				addq.w	#__sp, sp
00000000                            			endif
00000000                            		; ... Otherwise, use direct write as an optimization
00000000                            		else
00000000                            			move.l	a0, -(sp)
00000000                            			lea		@str\@(pc), a0
00000000                            			jsr		MDDBG__Console_\0
00000000                            			move.l	(sp)+, a0
00000000                            		endif
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            		popo	
00000000                            	elseif strcmp("\0","run")|strcmp("\0","Run")
00000000                            		jsr		MDDBG__ErrorHandler_ConsoleOnly
00000000                            		jsr		\1
00000000                            		bra.s	*
00000000                            	elseif strcmp("\0","clear")|strcmp("\0","Clear")
00000000                            		jsr		MDDBG__ErrorHandler_ClearConsole
00000000                            	elseif strcmp("\0","pause")|strcmp("\0","Pause")
00000000                            		jsr		MDDBG__ErrorHandler_PauseConsole
00000000                            	elseif strcmp("\0","sleep")|strcmp("\0","Sleep")
00000000                            		move.w	d0, -(sp)
00000000                            		move.l	a0, -(sp)
00000000                            		move.w	\1, d0
00000000                            		pusho
00000000                            		opt l-
00000000                            		subq.w	#1, d0
00000000                            		bcs.s	@sleep_done\@
00000000                            		@sleep_loop\@:
00000000                            			jsr		MDDBG__VSync
00000000                            			dbf		d0, @sleep_loop\@
00000000                            	@sleep_done\@:
00000000                            		popo
00000000                            		move.l	(sp)+, a0
00000000                            		move.w	(sp)+, d0
00000000                            	elseif strcmp("\0","setxy")|strcmp("\0","SetXY")
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr		MDDBG__Console_SetPosAsXY_Stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		jsr		MDDBG__Console_StartNewLine
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; KDebug integration interface
00000000                            ; ---------------------------------------------------------------
00000000                            ; EXAMPLES:
00000000                            ;	KDebug.WriteLine "Look in your debug console!"
00000000                            ;	KDebug.WriteLine "Your D0 is %<.w d0>"
00000000                            ;	KDebug.BreakPoint
00000000                            ;	KDebug.StartTimer
00000000                            ;	KDebug.EndTimer
00000000                            ;
00000000                            ; NOTICE:
00000000                            ;	All "KDebug.*" calls save and restore CCR so they are fully
00000000                            ;	safe to use in-between any instructions.
00000000                            ;	Use "_KDebug.*" instead if you deliberatly want to disbale
00000000                            ;	this behavior and safe a few cycles.
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            KDebug:	macro
00000000                            	if def(__DEBUG__)	; KDebug interface is only available in DEBUG builds
00000000                            		move.w	sr, -(sp)
00000000                            		_KDebug.\0	<\1>
00000000                            		move.w	(sp)+, sr
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Same as "KDebug", but doesn't save/restore CCR (can be used to save a few cycles)
00000000                            _KDebug:	macro
00000000                            	if def(__DEBUG__)	; KDebug interface is only available in DEBUG builds
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")|strcmp("\0","Write")|strcmp("\0","WriteLine")
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		pusho
00000000                            		opt l-
00000000                            		; If we have any arguments in string, use formatted string function ...
00000000                            		if (__sp>0)
00000000                            			movem.l	a0-a2/d7, -(sp)
00000000                            			lea		4*4(sp), a2
00000000                            			lea		@str\@(pc), a1
00000000                            			jsr		MDDBG__KDebug_\0\_Formatted
00000000                            			movem.l	(sp)+, a0-a2/d7
00000000                            			if (__sp>8)
00000000                            				lea		__sp(sp), sp
00000000                            			elseif (__sp>0)
00000000                            				addq.w	#__sp, sp
00000000                            			endif
00000000                            		; ... Otherwise, use direct write as an optimization
00000000                            		else
00000000                            			move.l	a0, -(sp)
00000000                            			lea		@str\@(pc), a0
00000000                            			jsr		MDDBG__KDebug_\0
00000000                            			move.l	(sp)+, a0
00000000                            		endif
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            		popo	
00000000                            	elseif strcmp("\0","breakline")|strcmp("\0","BreakLine")
00000000                            		jsr		MDDBG__KDebug_FlushLine
00000000                            	elseif strcmp("\0","starttimer")|strcmp("\0","StartTimer")
00000000                            		move.w	#$9FC0, ($C00004).l
00000000                            	elseif strcmp("\0","endtimer")|strcmp("\0","EndTimer")
00000000                            		move.w	#$9F00, ($C00004).l
00000000                            	elseif strcmp("\0","breakpoint")|strcmp("\0","BreakPoint")
00000000                            		move.w	#$9D00, ($C00004).l
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""KDebug"""
00000000                            	endif
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage:	macro	string, opts
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		MDDBG__ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		if DEBUGGER__EXTENSIONS__ENABLE
00000000                            			dc.b	\opts+_eh_return|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            			even													; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            			jmp		MDDBG__ErrorHandler_PagesController				; ... extensions controller
00000000                            		else
00000000                            			dc.b	\opts+0
00000000                            			even
00000000                            		endif
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode:	macro string
00000000                            	__pos:	= instr(\string,'%<')		; token position
00000000                            	__stack:= 0						; size of actual stack
00000000                            	__sp:	= 0						; stack displacement
00000000                            	pusho
00000000                            	opt	ae-		; make sure "automatic even" is disabled as this disrupts string generation
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	= instr(__pos+1,\string,'>')
00000000                                	if __endpos=0
00000000                            			inform 3,'Missing a closing bracket after %<'
00000000                                	endif
00000000                                	__midpos:	= instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endif
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string			; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string			; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			if instr("\__operand","(sp)")|instr("\__operand","(SP)")
00000000                            				; Referring to (SP) may get unexpected results because stack is already shifted at this point
00000000                            				; Using -(SP) and (SP)+ will crash because of stack corruption.
00000000                            				inform 3,'Cannot use (SP) in a formatted string'
00000000                            			endif
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            			else
00000000                            				inform 3,'Unrecognized type in string operand: %<\__substr>'
00000000                            			endif
00000000                            		endif
00000000                            		__pos:	= instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	popo	; restore previous options
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString:	macro string
00000000                            	__lpos:	= 1							; start position
00000000                            	__pos:	= instr(\string,'%<')		; token position
00000000                            	while (__pos)
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	= instr(__pos+1,\string,'>')
00000000                                	__midpos:	= instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endif
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string			; .type
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."    
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string			; param
00000000                            			
00000000                            			; Validate format setting ("param")
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			elseif strcmp("\__param","signed")
00000000                            				__param: substr ,,"hex+signed"	; if param is "signed", correct it to "hex+signed"
00000000                            			endif
00000000                            			if (\__param < $80)
00000000                            				inform	2,"Illegal operand format setting: ""\__param\"". Expected ""hex"", ""dec"", ""bin"", ""sym"", ""str"" or their derivatives."
00000000                            			endif
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endif
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endif
00000000                            		__lpos:	= __endpos+1
00000000                            		__pos:	= instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; MIT License
00000000                            ; 
00000000                            ; Copyright (c) 2016-2024 Vladikcomper
00000000                            ; 
00000000                            ; Permission is hereby granted, free of charge, to any person
00000000                            ; obtaining a copy ; of this software and associated
00000000                            ; documentation files (the "Software"), to deal in the Software 
00000000                            ; without restriction, including without limitation the rights
00000000                            ; to use, copy, modify, merge, publish, distribute, sublicense,
00000000                            ; and/or sell copies of the Software, and to permit persons to
00000000                            ; whom the Software is furnished to do so, subject to the
00000000                            ; following conditions:
00000000                            ; 
00000000                            ; The above copyright notice and this permission notice shall be
00000000                            ; included in all copies or substantial portions of the Software.
00000000                            ; 
00000000                            ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
00000000                            ; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
00000000                            ; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
00000000                            ; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
00000000                            ; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
00000000                            ; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
00000000                            ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
00000000                            ; OTHER DEALINGS IN THE SOFTWARE.
00000000                            ; ---------------------------------------------------------------
00000000                            		
00000000                            ; VARIABLES:
00000000                            
00000000 =00C00004                  VdpCtrl:    equ $C00004  ; VDP control port
00000000 =00C00000                  VdpData:    equ $C00000  ; VDP data port
00000000 =00C00008                  HvCounter:  equ $C00008  ; H/V counter
00000000                            
00000000 =00008000                  VDPREG_MODE1:     equ $8000  ; Mode register #1
00000000 =00008100                  VDPREG_MODE2:     equ $8100  ; Mode register #2
00000000 =00008B00                  VDPREG_MODE3:     equ $8B00  ; Mode register #3
00000000 =00008C00                  VDPREG_MODE4:     equ $8C00  ; Mode register #4
00000000                            
00000000 =00008200                  VDPREG_PLANEA:    equ $8200  ; Plane A table address
00000000 =00008400                  VDPREG_PLANEB:    equ $8400  ; Plane B table address
00000000 =00008500                  VDPREG_SPRITE:    equ $8500  ; Sprite table address
00000000 =00008300                  VDPREG_WINDOW:    equ $8300  ; Window table address
00000000 =00008D00                  VDPREG_HSCROLL:   equ $8D00  ; HScroll table address
00000000                            
00000000 =00009000                  VDPREG_SIZE:      equ $9000  ; Plane A and B size
00000000 =00009100                  VDPREG_WINX:      equ $9100  ; Window X split position
00000000 =00009200                  VDPREG_WINY:      equ $9200  ; Window Y split position
00000000 =00008F00                  VDPREG_INCR:      equ $8F00  ; Autoincrement
00000000 =00008700                  VDPREG_BGCOL:     equ $8700  ; Background color
00000000 =00008A00                  VDPREG_HRATE:     equ $8A00  ; HBlank interrupt rate
00000000                            
00000000 =00009300                  VDPREG_DMALEN_L:  equ $9300  ; DMA length (low)
00000000 =00009400                  VDPREG_DMALEN_H:  equ $9400  ; DMA length (high)
00000000 =00009500                  VDPREG_DMASRC_L:  equ $9500  ; DMA source (low)
00000000 =00009600                  VDPREG_DMASRC_M:  equ $9600  ; DMA source (mid)
00000000 =00009700                  VDPREG_DMASRC_H:  equ $9700  ; DMA source (high)
00000000                            
00000000 =40000000                  VRAM_ADDR_CMD:  equ $40000000
00000000 =C0000000                  CRAM_ADDR_CMD:  equ $C0000000
00000000 =40000010                  VSRAM_ADDR_CMD: equ $40000010
00000000                            
00000000 =00010000                  VRAM_SIZE:    equ 65536
00000000 =00000080                  CRAM_SIZE:    equ 128
00000000 =00000050                  VSRAM_SIZE:   equ 80
00000000                            
00000000 =00000000                  GFXMODE_256x224:      equ %00000000
00000000 =00000081                  GFXMODE_320x224:      equ %10000001
00000000 =00000006                  GFXMODE_256x448:      equ %00000110
00000000 =00000087                  GFXMODE_320x448:      equ %10000111
00000000 =00000008                  GFXMODE_256x224_SH:   equ %00001000
00000000 =00000089                  GFXMODE_320x224_SH:   equ %10001001
00000000 =0000000E                  GFXMODE_256x448_SH:   equ %00001110
00000000 =0000008F                  GFXMODE_320x448_SH:   equ %10001111
00000000                            
00000000 =00A10009                  IoCtrl1: equ $A10009   ; 1P control port
00000000 =00A1000B                  IoCtrl2: equ $A1000B   ; 2P control port
00000000 =00A10003                  IoData1: equ $A10003   ; 1P data port
00000000 =00A10005                  IoData2: equ $A10005   ; 2P data port
00000000                            
00000000 =00A00000                  Z80Ram:     equ $A00000  ; Where Z80 RAM starts
00000000 =00A11100                  Z80BusReq:  equ $A11100  ; Z80 bus request line
00000000 =00A11200                  Z80Reset:   equ $A11200  ; Z80 reset line
00000000                            
00000000                            
00000000                            
00000000                            ; END OF VARIABLES
00000000                            
00000000                            ; MACROS
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            	
00000000                            SetGfxMode macro mode
00000000                                move.w  #VDPREG_MODE4|(mode), (VdpCtrl)
00000000                                endm
00000000                            	
00000000                            PauseZ80: macro
00000000                                move.w  #$100, (Z80BusReq)
00000000                            @WaitZ80\@:
00000000                                btst    #0, (Z80BusReq)
00000000                                bne.s   @WaitZ80\@
00000000                                endm
00000000                            	
00000000                            ResumeZ80: macro
00000000                                move.w  #$000, (Z80BusReq)
00000000                                endm
00000000                            	
00000000                            FastPauseZ80: macro
00000000                                move.w  #$100, (Z80BusReq)
00000000                                endm
00000000                            	
00000000                            ; END OF MACROS
00000000                            	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:			dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  					dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  					dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  					dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  					dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  					dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  					dc.l ErrorExcept, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000080 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  					dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  					dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 5752 5354 5544 494F 5320+  Date:				dc.b 'WRSTUDIOS 2025  ' ; Release date
00000120 5375 6E72 6973 6520 2841+  Title_Local:		dc.b 'Sunrise (April Fools)                           ' ; Domestic name
00000150 5375 6E72 6973 6520 2841+  Title_Int:			dc.b 'Sunrise (April Fools)                           ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:				dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:			dc.w 0
00000190 4A20 2020 2020 2020 2020+  					dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:		dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:			dc.l EndOfRom-1	; ROM end
000001A8 00FF 0000                  RamStartLoc:		dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:			dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:		dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  					dc.l $20202020		; SRAM start
000001B8 2020 2020                  					dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:				dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:				dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 6100 0000                  		bsr.w	VDPSetup
0000020A                            		SetGfxMode GFXMODE_256x224
0000020A 33FC 8C00 00C0 0004      M 	move.w	#vdpreg_mode4|(mode),(vdpctrl)
00000212                            		FastPauseZ80
00000212 33FC 0100 00A1 1100      M 	move.w	#$100,(z80busreq)
0000021A 13FC 0040 00A1 0009        		move.b  #$40, (IoCtrl1)   ; 1P control port
00000222 13FC 0040 00A1 0003        		move.b  #$40, (IoData1)   ; 1P data port
0000022A 13FC 0040 00A1 000B        		move.b  #$40, (IoCtrl2)   ; 2P control port
00000232 13FC 0040 00A1 0005        		move.b  #$40, (IoData2)   ; 2P data port
0000023A                            		ResumeZ80
0000023A 33FC 0000 00A1 1100      M 	move.w	#$000,(z80busreq)
00000242 6100 0000                  		bsr.w	ReadJoypad
00000246 4EF9 0000 0000             		jmp	MainGameLoop
0000024C 4E75                       		rts
0000024E                            		
0000024E                            VDPSetup:
0000024E 4A79 00C0 0004             		tst.w   (VdpCtrl)
00000254 41F9 00C0 0004             		lea     (VdpCtrl), a0
0000025A                                
0000025A 30BC 8004                  		move.w  #VDPREG_MODE1|$04, (a0)    ; Mode register #1
0000025E 30BC 8104                  		move.w  #VDPREG_MODE2|$04, (a0)    ; Mode register #2
00000262 30BC 8B00                  		move.w  #VDPREG_MODE3|$00, (a0)    ; Mode register #3
00000266 30BC 8C81                  		move.w  #VDPREG_MODE4|$81, (a0)    ; Mode register #4
0000026A                            		
0000026A 30BC 8230                  		move.w  #VDPREG_PLANEA|$30, (a0)   ; Plane A address
0000026E 30BC 8407                  		move.w  #VDPREG_PLANEB|$07, (a0)   ; Plane B address
00000272 30BC 8578                  		move.w  #VDPREG_SPRITE|$78, (a0)   ; Sprite address
00000276 30BC 8334                  		move.w  #VDPREG_WINDOW|$34, (a0)   ; Window address
0000027A 30BC 8D3D                  		move.w  #VDPREG_HSCROLL|$3D, (a0)  ; HScroll address
0000027E                            		
0000027E 30BC 9001                  		move.w  #VDPREG_SIZE|$01, (a0)     ; Tilemap size
00000282 30BC 9100                  		move.w  #VDPREG_WINX|$00, (a0)     ; Window X split
00000286 30BC 9200                  		move.w  #VDPREG_WINY|$00, (a0)     ; Window Y split
0000028A 30BC 8F02                  		move.w  #VDPREG_INCR|$02, (a0)     ; Autoincrement
0000028E 30BC 8700                  		move.w  #VDPREG_BGCOL|$00, (a0)    ; Background color
00000292 30BC 8AFF                  		move.w  #VDPREG_HRATE|$FF, (a0)    ; HBlank IRQ rate
00000296                            		
00000296                            		; Stuff we'll use a lot
00000296 7000                       		moveq   #0, d0          ; To write zeroes
00000298 41F9 00C0 0004             		lea     (VdpCtrl), a0   ; VDP control port
0000029E 43F9 00C0 0000             		lea     (VdpData), a1   ; VDP data port
000002A4                            		
000002A4                            		; Clear VRAM
000002A4 20BC 4000 0000             		move.l  #VRAM_ADDR_CMD, (a0)
000002AA 323C 3FFF                  		move.w  #(VRAM_SIZE/4)-1, d1
000002AE                            	@ClearVram:
000002AE 2280                       		move.l  d0, (a1)
000002B0 51C9 FFFC                  		dbf     d1, @ClearVram
000002B4                            		
000002B4                            		; Clear CRAM
000002B4 20BC C000 0000             		move.l  #CRAM_ADDR_CMD, (a0)
000002BA 323C 001F                  		move.w  #(CRAM_SIZE/4)-1, d1
000002BE                            	@ClearCram:
000002BE 2280                       		move.l  d0, (a1)
000002C0 51C9 FFFC                  		dbf     d1, @ClearCram
000002C4                            		
000002C4                            		; Clear VSRAM
000002C4 20BC 4000 0010             		move.l  #VSRAM_ADDR_CMD, (a0)
000002CA 323C 0013                  		move.w  #(VSRAM_SIZE/4)-1, d1
000002CE                            	@ClearVsram:
000002CE 2280                       		move.l  d0, (a1)
000002D0 51C9 FFFC                  		dbf     d1, @ClearVsram
000002D4 4E75                       		rts
000002D6                            		
000002D6                            ReadJoypad:
000002D6                            		; a0 = IoData1 for player 1
000002D6                            		;    = IoData2 for player 2
000002D6                            		
000002D6                            		FastPauseZ80        ; Pause Z80 for a bit
000002D6 33FC 0100 00A1 1100      M 	move.w	#$100,(z80busreq)
000002DE                            		
000002DE 10BC 0040                  		move.b  #$40, (a0)  ; Do 1st step
000002E2 4E71                       		nop                 ; D-pad, B and C
000002E4 4E71                       		nop
000002E6 4E71                       		nop
000002E8 4E71                       		nop
000002EA 1010                       		move.b  (a0), d0
000002EC                            		
000002EC 10BC 0000                  		move.b  #$00, (a0)  ; Do 2nd step
000002F0 4E71                       		nop                 ; A and Start
000002F2 4E71                       		nop
000002F4 4E71                       		nop
000002F6 4E71                       		nop
000002F8 1210                       		move.b  (a0), d1
000002FA                            		
000002FA                            		ResumeZ80           ; Z80 can run now
000002FA 33FC 0000 00A1 1100      M 	move.w	#$000,(z80busreq)
00000302                            		
00000302 0200 003F                  		and.b   #$3F, d0    ; Rearrange bits
00000306 0201 0030                  		and.b   #$30, d1    ; into SACBRLDU
0000030A E509                       		lsl.b   #2, d1
0000030C 8001                       		or.b    d1, d0
0000030E                            		
0000030E                            		; Now d0 contains all the buttons
0000030E                            		; May want to use a NOT if you prefer
0000030E                            		; 1 = pressed and 0 = released
0000030E 4E75                       		rts
00000310                            		
00000310                            ; ==============================================================
00000310                            
00000310                            MainGameLoop:
00000310 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000314 0240 001C                  		andi.w	#$1C,d0
00000318 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000031C 60F2                       		bra.s	MainGameLoop
0000031E                            ; ===========================================================================
0000031E                            ; ---------------------------------------------------------------------------
0000031E                            ; Main game mode array
0000031E                            ; ---------------------------------------------------------------------------
0000031E                            
0000031E                            GameModeArray:
0000031E 6000 0000                  		bra.w	WRScreen	; Sega Screen ($00)
00000322                            ; ===========================================================================
00000322 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
00000326                            ; ===========================================================================
00000326 6000 0000                  		bra.w	Level		; Normal Level ($08)
0000032A                            ; ===========================================================================
0000032A 6000 0000                  		bra.w	Credits		; Credits ($1C)
0000032E                            ; ===========================================================================
0000032E 4E75                       		rts
00000330                            
00000330                            WRScreen:
00000330 60FE                       		bra.s	*
00000332 4E75                       		rts
00000334                            		
00000334                            TitleScreen:
00000334 60FE                       		bra.s	*
00000336 4E75                       		rts
00000338                            		
00000338                            Level:
00000338 60FE                       		bra.s	*
0000033A 4E75                       		rts
0000033C                            		
0000033C                            Credits:
0000033C 60FE                       		bra.s	*
0000033E 4E75                       		rts
00000340                            		
00000340                            
00000340                            
00000340                            ; ==============================================================
00000340                            ; --------------------------------------------------------------
00000340                            ; Debugging modules
00000340                            ; --------------------------------------------------------------
00000340                            
00000340                               include   "ErrorHandler.asm"
00000340                            
00000340                            ; ===============================================================
00000340                            ; ---------------------------------------------------------------
00000340                            ; MD Debugger and Error Handler v.2.6
00000340                            ;
00000340                            ;
00000340                            ; Documentation, references and source code are available at:
00000340                            ; - https://github.com/vladikcomper/md-modules
00000340                            ;
00000340                            ; (c) 2016-2024, Vladikcomper
00000340                            ; ---------------------------------------------------------------
00000340                            ; Debugger and Error handler blob
00000340                            ; ---------------------------------------------------------------
00000340                            
00000340                            
00000340                            ; ---------------------------------------------------------------
00000340                            ; Exception vectors
00000340                            ; ---------------------------------------------------------------
00000340                            
00000340 =00000000                  _eh_default:	equ	0
00000340                            
00000340                            ; ---------------------------------------------------------------
00000340                            
00000340                            BusError:
00000340                            	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error
00000340                          M 	__fstring_generateargumentscode	"BUS ERROR"
00000340 =00000000                M 	__pos:	= instr("BUS ERROR",'%<')
00000340 =00000000                M 	__stack:=	0
00000340 =00000000                M 	__sp:	= 0
00000340                          M 	pusho
00000340                          M 	opt	ae-
00000340                          M 	while	(__pos)
00000340                          M 	rept	__stack
00000340                          M 	popo
00000340 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
00000346                          M 	__fstring_generatedecodedstring	"BUS ERROR"
00000346 =00000001                M 	__lpos:	= 1
00000346 =00000000                M 	__pos:	= instr("BUS ERROR",'%<')
00000346                          M 	while	(__pos)
00000346                          M 	__substr:	substr __lpos,,"BUS ERROR"
00000346 4255 5320 4552 524F 52   M 	dc.b	"BUS ERROR"
0000034F 00                       M 	dc.b	0
00000350 A1                       M 	dc.b	_eh_default|_eh_address_error+_eh_return|(((*&1)^1)*_eh_align_offset)
00000352 00                       M 	even
00000352 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
00000358                            
00000358                            AddressError:
00000358                            	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error
00000358                          M 	__fstring_generateargumentscode	"ADDRESS ERROR"
00000358 =00000000                M 	__pos:	= instr("ADDRESS ERROR",'%<')
00000358 =00000000                M 	__stack:=	0
00000358 =00000000                M 	__sp:	= 0
00000358                          M 	pusho
00000358                          M 	opt	ae-
00000358                          M 	while	(__pos)
00000358                          M 	rept	__stack
00000358                          M 	popo
00000358 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
0000035E                          M 	__fstring_generatedecodedstring	"ADDRESS ERROR"
0000035E =00000001                M 	__lpos:	= 1
0000035E =00000000                M 	__pos:	= instr("ADDRESS ERROR",'%<')
0000035E                          M 	while	(__pos)
0000035E                          M 	__substr:	substr __lpos,,"ADDRESS ERROR"
0000035E 4144 4452 4553 5320 4552+M 	dc.b	"ADDRESS ERROR"
0000036B 00                       M 	dc.b	0
0000036C A1                       M 	dc.b	_eh_default|_eh_address_error+_eh_return|(((*&1)^1)*_eh_align_offset)
0000036E 00                       M 	even
0000036E 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
00000374                            
00000374                            IllegalInstr:
00000374                            	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default
00000374                          M 	__fstring_generateargumentscode	"ILLEGAL INSTRUCTION"
00000374 =00000000                M 	__pos:	= instr("ILLEGAL INSTRUCTION",'%<')
00000374 =00000000                M 	__stack:=	0
00000374 =00000000                M 	__sp:	= 0
00000374                          M 	pusho
00000374                          M 	opt	ae-
00000374                          M 	while	(__pos)
00000374                          M 	rept	__stack
00000374                          M 	popo
00000374 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
0000037A                          M 	__fstring_generatedecodedstring	"ILLEGAL INSTRUCTION"
0000037A =00000001                M 	__lpos:	= 1
0000037A =00000000                M 	__pos:	= instr("ILLEGAL INSTRUCTION",'%<')
0000037A                          M 	while	(__pos)
0000037A                          M 	__substr:	substr __lpos,,"ILLEGAL INSTRUCTION"
0000037A 494C 4C45 4741 4C20 494E+M 	dc.b	"ILLEGAL INSTRUCTION"
0000038D 00                       M 	dc.b	0
0000038E A0                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
00000390 00                       M 	even
00000390 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
00000396                            
00000396                            ZeroDivide:
00000396                            	__ErrorMessage "ZERO DIVIDE", _eh_default
00000396                          M 	__fstring_generateargumentscode	"ZERO DIVIDE"
00000396 =00000000                M 	__pos:	= instr("ZERO DIVIDE",'%<')
00000396 =00000000                M 	__stack:=	0
00000396 =00000000                M 	__sp:	= 0
00000396                          M 	pusho
00000396                          M 	opt	ae-
00000396                          M 	while	(__pos)
00000396                          M 	rept	__stack
00000396                          M 	popo
00000396 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
0000039C                          M 	__fstring_generatedecodedstring	"ZERO DIVIDE"
0000039C =00000001                M 	__lpos:	= 1
0000039C =00000000                M 	__pos:	= instr("ZERO DIVIDE",'%<')
0000039C                          M 	while	(__pos)
0000039C                          M 	__substr:	substr __lpos,,"ZERO DIVIDE"
0000039C 5A45 524F 2044 4956 4944+M 	dc.b	"ZERO DIVIDE"
000003A7 00                       M 	dc.b	0
000003A8 A0                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
000003AA 00                       M 	even
000003AA 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
000003B0                            
000003B0                            ChkInstr:
000003B0                            	__ErrorMessage "CHK INSTRUCTION", _eh_default
000003B0                          M 	__fstring_generateargumentscode	"CHK INSTRUCTION"
000003B0 =00000000                M 	__pos:	= instr("CHK INSTRUCTION",'%<')
000003B0 =00000000                M 	__stack:=	0
000003B0 =00000000                M 	__sp:	= 0
000003B0                          M 	pusho
000003B0                          M 	opt	ae-
000003B0                          M 	while	(__pos)
000003B0                          M 	rept	__stack
000003B0                          M 	popo
000003B0 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
000003B6                          M 	__fstring_generatedecodedstring	"CHK INSTRUCTION"
000003B6 =00000001                M 	__lpos:	= 1
000003B6 =00000000                M 	__pos:	= instr("CHK INSTRUCTION",'%<')
000003B6                          M 	while	(__pos)
000003B6                          M 	__substr:	substr __lpos,,"CHK INSTRUCTION"
000003B6 4348 4B20 494E 5354 5255+M 	dc.b	"CHK INSTRUCTION"
000003C5 00                       M 	dc.b	0
000003C6 A0                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
000003C8 00                       M 	even
000003C8 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
000003CE                            
000003CE                            TrapvInstr:
000003CE                            	__ErrorMessage "TRAPV INSTRUCTION", _eh_default
000003CE                          M 	__fstring_generateargumentscode	"TRAPV INSTRUCTION"
000003CE =00000000                M 	__pos:	= instr("TRAPV INSTRUCTION",'%<')
000003CE =00000000                M 	__stack:=	0
000003CE =00000000                M 	__sp:	= 0
000003CE                          M 	pusho
000003CE                          M 	opt	ae-
000003CE                          M 	while	(__pos)
000003CE                          M 	rept	__stack
000003CE                          M 	popo
000003CE 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
000003D4                          M 	__fstring_generatedecodedstring	"TRAPV INSTRUCTION"
000003D4 =00000001                M 	__lpos:	= 1
000003D4 =00000000                M 	__pos:	= instr("TRAPV INSTRUCTION",'%<')
000003D4                          M 	while	(__pos)
000003D4                          M 	__substr:	substr __lpos,,"TRAPV INSTRUCTION"
000003D4 5452 4150 5620 494E 5354+M 	dc.b	"TRAPV INSTRUCTION"
000003E5 00                       M 	dc.b	0
000003E6 A0                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
000003E8 00                       M 	even
000003E8 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
000003EE                            
000003EE                            PrivilegeViol:
000003EE                            	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default
000003EE                          M 	__fstring_generateargumentscode	"PRIVILEGE VIOLATION"
000003EE =00000000                M 	__pos:	= instr("PRIVILEGE VIOLATION",'%<')
000003EE =00000000                M 	__stack:=	0
000003EE =00000000                M 	__sp:	= 0
000003EE                          M 	pusho
000003EE                          M 	opt	ae-
000003EE                          M 	while	(__pos)
000003EE                          M 	rept	__stack
000003EE                          M 	popo
000003EE 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
000003F4                          M 	__fstring_generatedecodedstring	"PRIVILEGE VIOLATION"
000003F4 =00000001                M 	__lpos:	= 1
000003F4 =00000000                M 	__pos:	= instr("PRIVILEGE VIOLATION",'%<')
000003F4                          M 	while	(__pos)
000003F4                          M 	__substr:	substr __lpos,,"PRIVILEGE VIOLATION"
000003F4 5052 4956 494C 4547 4520+M 	dc.b	"PRIVILEGE VIOLATION"
00000407 00                       M 	dc.b	0
00000408 A0                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
0000040A 00                       M 	even
0000040A 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
00000410                            
00000410                            Trace:
00000410                            	__ErrorMessage "TRACE", _eh_default
00000410                          M 	__fstring_generateargumentscode	"TRACE"
00000410 =00000000                M 	__pos:	= instr("TRACE",'%<')
00000410 =00000000                M 	__stack:=	0
00000410 =00000000                M 	__sp:	= 0
00000410                          M 	pusho
00000410                          M 	opt	ae-
00000410                          M 	while	(__pos)
00000410                          M 	rept	__stack
00000410                          M 	popo
00000410 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
00000416                          M 	__fstring_generatedecodedstring	"TRACE"
00000416 =00000001                M 	__lpos:	= 1
00000416 =00000000                M 	__pos:	= instr("TRACE",'%<')
00000416                          M 	while	(__pos)
00000416                          M 	__substr:	substr __lpos,,"TRACE"
00000416 5452 4143 45             M 	dc.b	"TRACE"
0000041B 00                       M 	dc.b	0
0000041C A0                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
0000041E 00                       M 	even
0000041E 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
00000424                            
00000424                            Line1010Emu:
00000424                            	__ErrorMessage "LINE 1010 EMULATOR", _eh_default
00000424                          M 	__fstring_generateargumentscode	"LINE 1010 EMULATOR"
00000424 =00000000                M 	__pos:	= instr("LINE 1010 EMULATOR",'%<')
00000424 =00000000                M 	__stack:=	0
00000424 =00000000                M 	__sp:	= 0
00000424                          M 	pusho
00000424                          M 	opt	ae-
00000424                          M 	while	(__pos)
00000424                          M 	rept	__stack
00000424                          M 	popo
00000424 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
0000042A                          M 	__fstring_generatedecodedstring	"LINE 1010 EMULATOR"
0000042A =00000001                M 	__lpos:	= 1
0000042A =00000000                M 	__pos:	= instr("LINE 1010 EMULATOR",'%<')
0000042A                          M 	while	(__pos)
0000042A                          M 	__substr:	substr __lpos,,"LINE 1010 EMULATOR"
0000042A 4C49 4E45 2031 3031 3020+M 	dc.b	"LINE 1010 EMULATOR"
0000043C 00                       M 	dc.b	0
0000043D 20                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
0000043E                          M 	even
0000043E 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
00000444                            
00000444                            Line1111Emu:
00000444                            	__ErrorMessage "LINE 1111 EMULATOR", _eh_default
00000444                          M 	__fstring_generateargumentscode	"LINE 1111 EMULATOR"
00000444 =00000000                M 	__pos:	= instr("LINE 1111 EMULATOR",'%<')
00000444 =00000000                M 	__stack:=	0
00000444 =00000000                M 	__sp:	= 0
00000444                          M 	pusho
00000444                          M 	opt	ae-
00000444                          M 	while	(__pos)
00000444                          M 	rept	__stack
00000444                          M 	popo
00000444 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
0000044A                          M 	__fstring_generatedecodedstring	"LINE 1111 EMULATOR"
0000044A =00000001                M 	__lpos:	= 1
0000044A =00000000                M 	__pos:	= instr("LINE 1111 EMULATOR",'%<')
0000044A                          M 	while	(__pos)
0000044A                          M 	__substr:	substr __lpos,,"LINE 1111 EMULATOR"
0000044A 4C49 4E45 2031 3131 3120+M 	dc.b	"LINE 1111 EMULATOR"
0000045C 00                       M 	dc.b	0
0000045D 20                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
0000045E                          M 	even
0000045E 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
00000464                            
00000464                            ErrorExcept:
00000464                            	__ErrorMessage "ERROR EXCEPTION", _eh_default
00000464                          M 	__fstring_generateargumentscode	"ERROR EXCEPTION"
00000464 =00000000                M 	__pos:	= instr("ERROR EXCEPTION",'%<')
00000464 =00000000                M 	__stack:=	0
00000464 =00000000                M 	__sp:	= 0
00000464                          M 	pusho
00000464                          M 	opt	ae-
00000464                          M 	while	(__pos)
00000464                          M 	rept	__stack
00000464                          M 	popo
00000464 4EB9 0000 0000           M 	jsr	mddbg__errorhandler
0000046A                          M 	__fstring_generatedecodedstring	"ERROR EXCEPTION"
0000046A =00000001                M 	__lpos:	= 1
0000046A =00000000                M 	__pos:	= instr("ERROR EXCEPTION",'%<')
0000046A                          M 	while	(__pos)
0000046A                          M 	__substr:	substr __lpos,,"ERROR EXCEPTION"
0000046A 4552 524F 5220 4558 4345+M 	dc.b	"ERROR EXCEPTION"
00000479 00                       M 	dc.b	0
0000047A A0                       M 	dc.b	_eh_default+_eh_return|(((*&1)^1)*_eh_align_offset)
0000047C 00                       M 	even
0000047C 4EF9 0000 0000           M 	jmp	mddbg__errorhandler_pagescontroller
00000482                            
00000482                            
00000482                            ; ---------------------------------------------------------------
00000482                            ; MD Debugger blob
00000482                            ; ---------------------------------------------------------------
00000482                            
00000482                            ErrorHandler:
00000482                            
00000482 46FC 2700 4FEF FFF0 48E7+  	dc.l	$46FC2700, $4FEFFFF0, $48E7FFFE, $4EBA0242, $49EF004C, $4E682F08, $47EF0040, $4EBA0124
000004A2 41FA 02C4 4EBA 0B6C 225C+  	dc.l	$41FA02C4, $4EBA0B6C, $225C45D4, $4EBA0C2A, $4EBA0AF2, $49D21C19, $6A025249, $47D10806
000004C2 0000 670E 41FA 02A7 222C+  	dc.l	$0000670E, $41FA02A7, $222C0002, $4EBA016A, $504C41FA, $02A4222C, $00024EBA, $015C0806
000004E2 0002 6614 2278 0000 45EC+  	dc.l	$00026614, $22780000, $45EC0006, $4EBA01BC, $41FA0290, $4EBA0142, $4EBA0AAA, $08060006
00000502 6600 00AA 45EF 0004 4EBA+  	dc.l	$660000AA, $45EF0004, $4EBA0A74, $3F017003, $4EBA0A38, $303C6430, $7A074EBA, $0132321F
00000522 7011 4EBA 0A26 303C 6130+  	dc.l	$70114EBA, $0A26303C, $61307A06, $4EBA0120, $303C7370, $7A002F0C, $45D74EBA, $0112584F
00000542 0806 0001 6714 43FA 0255+  	dc.l	$08060001, $671443FA, $025545D7, $4EBA0B8E, $43FA0256, $45D44EBA, $0B80584F, $4EBA0A20
00000562 5241 7001 4EBA 09E4 2038+  	dc.l	$52417001, $4EBA09E4, $20380078, $41FA0244, $4EBA010A, $20380070, $41FA0240, $4EBA00FE
00000582 4EBA 0A22 2278 0000 45D4+  	dc.l	$4EBA0A22, $22780000, $45D45389, $61404EBA, $09EE7A19, $9A416B0A, $61484EBA, $005A51CD
000005A2 FFFA 0806 0005 660A 4E71+  	dc.l	$FFFA0806, $0005660A, $4E7160FC, $72004EBA, $0A222ECB, $4CDF7FFF, $487AFFEE, $2F2FFFC4
000005C2 4E75 43FA 015E 45FA 0208+  	dc.l	$4E7543FA, $015E45FA, $02084EFA, $08EE223C, $00FFFFFF, $2409C481, $2242240A, $C4812442
000005E2 4E75 4FEF FFD0 41D7 7EFF+  	dc.l	$4E754FEF, $FFD041D7, $7EFF20FC, $28535029, $30FC3A20, $60184FEF, $FFD041D7, $7EFF30FC
00000602 202B 320A 924C 4EBA 05BA+  	dc.l	$202B320A, $924C4EBA, $05BA30FC, $3A207005, $72ECB5C9, $650272EE, $10C1321A, $4EBA05C2
00000622 10FC 0020 51C8 FFEA 4218+  	dc.l	$10FC0020, $51C8FFEA, $421841D7, $72004EBA, $09DC4FEF, $00304E75, $4EBA09D8, $2F012F01
00000642 45D7 43FA                  	dc.l	$45D743FA
00000646 0000                       	dc.w	DEBUGGER__STR_OFFSET_SELECTOR-MDDBG__Error_DrawOffsetLocation__inj-2
00000648 4EBA 0A90 504F 4E75 4FEF+  	dc.l	$4EBA0A90, $504F4E75, $4FEFFFF0, $7EFF41D7, $30C030FC, $3A2010FC, $00EC221A, $4EBA0574
00000668 4218 41D7 7200 4EBA 099E+  	dc.l	$421841D7, $72004EBA, $099E5240, $51CDFFE0, $4FEF0010, $4E752200, $48414601, $66F62440
00000688 0C5A 4EF9 6604 2212 60A8+  	dc.l	$0C5A4EF9, $66042212, $60A80C6A, $4EF8FFFE, $66063212, $48C1609A, $4EBA0972, $41FA011E
000006A8 4EFA 0966 5989 4EBA FF20+  	dc.l	$4EFA0966, $59894EBA, $FF20B3CA, $650C0C52, $0040650A, $548AB3CA, $64F47200, $4E752212
000006C8 67F2 0801 0000 66EC 4E75+  	dc.l	$67F20801, $000066EC, $4E754BF9, $00C00004, $4DEDFFFC, $44D569FC, $41FA0026, $30186A04
000006E8 3A80 60F8 7000 2ABC 4000+  	dc.l	$3A8060F8, $70002ABC, $40000000, $2C802ABC, $40000010, $2C802ABC, $C0000000, $3C804E75
00000708 8004 8134 8500 8700 8B00+  	dc.l	$80048134, $85008700, $8B008C81, $8D008F02, $90119100, $92008220, $84040000, $44000000
00000728 0000 0001 0010 0011 0100+  	dc.l	$00000001, $00100011, $01000101, $01100111, $10001001, $10101011, $11001101, $11101111
00000748 FFFF 0EEE FFF2 00CE FFF2+  	dc.l	$FFFF0EEE, $FFF200CE, $FFF20EEA, $FFF20E86, $FFF24000, $00020028, $00280000, $008000FF
00000768 EAE0 FA01 F026 00EA 4164+  	dc.l	$EAE0FA01, $F02600EA, $41646472, $6573733A, $2000EA4F, $66667365, $743A2000, $EA43616C
00000788 6C65 723A 2000 EC80 8120+  	dc.l	$6C65723A, $2000EC80, $8120E8BF, $ECC800EC, $8320E8BF, $ECC800FA, $10E87573, $703A20EC
000007A8 8300 FA03 E873 723A 20EC+  	dc.l	$8300FA03, $E873723A, $20EC8100, $EA56496E, $743A2000, $EA48496E, $743A2000, $E83C756E
000007C8 6465 6669 6E65 643E 0000+  	dc.l	$64656669, $6E65643E, $000002F7, $00000000, $00000000, $183C3C18, $18001800, $6C6C6C00
000007E8 0000 0000 6C6C FE6C FE6C+  	dc.l	$00000000, $6C6CFE6C, $FE6C6C00, $187EC07C, $06FC1800, $00C60C18, $3060C600, $386C3876
00000808 CCCC 7600 1818 3000 0000+  	dc.l	$CCCC7600, $18183000, $00000000, $18306060, $60301800, $60301818, $18306000, $00EE7CFE
00000828 7CEE 0000 0018 187E 1818+  	dc.l	$7CEE0000, $0018187E, $18180000, $00000000, $18183000, $000000FE, $00000000, $00000000
00000848 0038 3800 060C 1830 60C0+  	dc.l	$00383800, $060C1830, $60C08000, $7CC6CEDE, $F6E67C00, $18781818, $18187E00, $7CC60C18
00000868 3066 FE00 7CC6 063C 06C6+  	dc.l	$3066FE00, $7CC6063C, $06C67C00, $0C1C3C6C, $FE0C0C00, $FEC0FC06, $06C67C00, $7CC6C0FC
00000888 C6C6 7C00 FEC6 060C 1818+  	dc.l	$C6C67C00, $FEC6060C, $18181800, $7CC6C67C, $C6C67C00, $7CC6C67E, $06C67C00, $001C1C00
000008A8 001C 1C00 0018 1800 0018+  	dc.l	$001C1C00, $00181800, $00181830, $0C183060, $30180C00, $0000FE00, $00FE0000, $6030180C
000008C8 1830 6000 7CC6 060C 1800+  	dc.l	$18306000, $7CC6060C, $18001800, $7CC6C6DE, $DCC07E00, $386CC6C6, $FEC6C600, $FC66667C
000008E8 6666 FC00 3C66 C0C0 C066+  	dc.l	$6666FC00, $3C66C0C0, $C0663C00, $F86C6666, $666CF800, $FEC2C0F8, $C0C2FE00, $FE62607C
00000908 6060 F000 7CC6 C0C0 DEC6+  	dc.l	$6060F000, $7CC6C0C0, $DEC67C00, $C6C6C6FE, $C6C6C600, $3C181818, $18183C00, $3C181818
00000928 D8D8 7000 C6CC D8F0 D8CC+  	dc.l	$D8D87000, $C6CCD8F0, $D8CCC600, $F0606060, $6062FE00, $C6EEFED6, $D6C6C600, $C6E6E6F6
00000948 DECE C600 7CC6 C6C6 C6C6+  	dc.l	$DECEC600, $7CC6C6C6, $C6C67C00, $FC66667C, $6060F000, $7CC6C6C6, $C6D67C06, $FCC6C6FC
00000968 D8CC C600 7CC6 C07C 06C6+  	dc.l	$D8CCC600, $7CC6C07C, $06C67C00, $7E5A1818, $18183C00, $C6C6C6C6, $C6C67C00, $C6C6C6C6
00000988 6C38 1000 C6C6 D6D6 FEEE+  	dc.l	$6C381000, $C6C6D6D6, $FEEEC600, $C66C3838, $386CC600, $6666663C, $18183C00, $FE860C18
000009A8 3062 FE00 7C60 6060 6060+  	dc.l	$3062FE00, $7C606060, $60607C00, $C0603018, $0C060200, $7C0C0C0C, $0C0C7C00, $10386CC6
000009C8 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $000000FF, $30301800, $00000000, $0000780C, $7CCC7E00, $E0607C66
000009E8 6666 FC00 0000 7CC6 C0C6+  	dc.l	$6666FC00, $00007CC6, $C0C67C00, $1C0C7CCC, $CCCC7E00, $00007CC6, $FEC07C00, $1C3630FC
00000A08 3030 7800 0000 76CE C67E+  	dc.l	$30307800, $000076CE, $C67E067C, $E0607C66, $6666E600, $18003818, $18183C00, $0C001C0C
00000A28 0C0C CC78 E060 666C 786C+  	dc.l	$0C0CCC78, $E060666C, $786CE600, $18181818, $18181C00, $00006CFE, $D6D6C600, $0000DC66
00000A48 6666 6600 0000 7CC6 C6C6+  	dc.l	$66666600, $00007CC6, $C6C67C00, $0000DC66, $667C60F0, $000076CC, $CC7C0C1E, $0000DC66
00000A68 6060 F000 0000 7CC0 7C06+  	dc.l	$6060F000, $00007CC0, $7C067C00, $3030FC30, $30361C00, $0000CCCC, $CCCC7600, $0000C6C6
00000A88 6C38 1000 0000 C6C6 D6FE+  	dc.l	$6C381000, $0000C6C6, $D6FE6C00, $0000C66C, $386CC600, $0000C6C6, $CE76067C, $0000FC98
00000AA8 3064 FC00 0E18 1870 1818+  	dc.l	$3064FC00, $0E181870, $18180E00, $18181800, $18181800, $7018180E, $18187000, $76DC0000
00000AC8 0000 0000 43FA 090A 0C59+  	dc.l	$00000000, $43FA090A, $0C59DEB2, $667270FE, $D05974FC, $76004841, $024100FF, $D241D241
00000AE8 B240 625C 675E 2031 1000+  	dc.l	$B240625C, $675E2031, $10006758, $47F10800, $48417000, $301BB253, $654C43F3, $08FE45E9
00000B08 FFFC E248 C042 B273 0000+  	dc.l	$FFFCE248, $C042B273, $00006514, $6204D6C0, $601A47F3, $0004200A, $908B6AE6, $594B600C
00000B28 45F3 00FC 200A 908B 6AD8+  	dc.l	$45F300FC, $200A908B, $6AD847D2, $925B7400, $341BD3C2, $48414241, $4841D283, $70004E75
00000B48 70FF 4E75 4841 7000 3001+  	dc.l	$70FF4E75, $48417000, $3001D680, $5283323C, $FFFF4841, $59416A8E, $70FF4E75, $47FA0872
00000B68 0C5B DEB2 664A D6D3 7800+  	dc.l	$0C5BDEB2, $664AD6D3, $78007200, $740045D3, $51CC0006, $16197807, $D603D341, $5242B252
00000B88 620A 65EC B42A 0002 6712+  	dc.l	$620A65EC, $B42A0002, $671265E4, $584AB252, $62FA65DC, $B42A0002, $65D666F0, $10EA0003
00000BA8 670A 51CF FFC6 4E94 64C0+  	dc.l	$670A51CF, $FFC64E94, $64C04E75, $53484E75, $70004E75, $4EFA0024, $4EFA0018, $760F3401
00000BC8 E84A C443 10FB 205C 51CF+  	dc.l	$E84AC443, $10FB205C, $51CF004A, $4E946444, $4E754841, $61046548, $4841E959, $780FC841
00000BE8 10FB 4040 51CF 0006 4E94+  	dc.l	$10FB4040, $51CF0006, $4E946534, $E959780F, $C84110FB, $402E51CF, $00064E94, $6522E959
00000C08 780F C841 10FB 401C 51CF+  	dc.l	$780FC841, $10FB401C, $51CF0006, $4E946510, $E959760F, $C24310FB, $100A51CF, $00044ED4
00000C28 4E75 3031 3233 3435 3637+  	dc.l	$4E753031, $32333435, $36373839, $41424344, $45464841, $67066106, $65E6609C, $4841E959
00000C48 780F C841 670E 10FB 40DA+  	dc.l	$780FC841, $670E10FB, $40DA51CF, $FFA04E94, $649A4E75, $E959780F, $C841670E, $10FB40C4
00000C68 51CF FF9C 4E94 6496 4E75+  	dc.l	$51CFFF9C, $4E946496, $4E75E959, $780FC841, $679E10FB, $40AE51CF, $FF984E94, $64924E75
00000C88 4EFA 0026 4EFA 001A 7407+  	dc.l	$4EFA0026, $4EFA001A, $74077018, $D201D100, $10C051CF, $00064E94, $650451CA, $FFEE4E75
00000CA8 4841 6104 6518 4841 740F+  	dc.l	$48416104, $65184841, $740F7018, $D241D100, $10C051CF, $00064E94, $650451CA, $FFEE4E75
00000CC8 4EFA 0010 4EFA 0048 47FA+  	dc.l	$4EFA0010, $4EFA0048, $47FA009A, $024100FF, $600447FA, $008C4200, $7609381B, $34039244
00000CE8 55CA FFFC D244 9443 4442+  	dc.l	$55CAFFFC, $D2449443, $44428002, $670E0602, $003010C2, $51CF0006, $4E946510, $381B6ADC
00000D08 0601 0030 10C1 51CF 0004+  	dc.l	$06010030, $10C151CF, $00044ED4, $4E7547FA, $002E4200, $7609281B, $34039284, $55CAFFFC
00000D28 D284 9443 4442 8002 670E+  	dc.l	$D2849443, $44428002, $670E0602, $003010C2, $51CF0006, $4E9465D4, $281B6ADC, $609E3B9A
00000D48 CA00 05F5 E100 0098 9680+  	dc.l	$CA0005F5, $E1000098, $9680000F, $42400001, $86A00000, $2710FFFF, $03E80064, $000AFFFF
00000D68 2710 03E8 0064 000A FFFF+  	dc.l	$271003E8, $0064000A, $FFFF48C1, $60084EFA, $00064881, $48C148E7, $50604EBA, $FD486618
00000D88 2E81 4EBA FDD8 4CDF 060A+  	dc.l	$2E814EBA, $FDD84CDF, $060A650A, $08030003, $66044EFA, $00B64E75, $4CDF060A, $08030002
00000DA8 6708 47FA 000A 4EFA 00B4+  	dc.l	$670847FA, $000A4EFA, $00B470FF, $60DE3C75, $6E6B6E6F, $776E3E00, $10FC002B, $51CF0006
00000DC8 4E94 65D2 4841 4A41 6700+  	dc.l	$4E9465D2, $48414A41, $6700FE72, $6000FE68, $08030003, $66C04EFA, $FDFA48E7, $F81010D9
00000DE8 5FCF FFFC 6E14 6718 1620+  	dc.l	$5FCFFFFC, $6E146718, $16207470, $C4034EBB, $201A64EA, $4CDF081F, $4E754E94, $64E060F4
00000E08 5348 4E94 4CDF 081F 4E75+  	dc.l	$53484E94, $4CDF081F, $4E7547FA, $FDA8B702, $D4024EFB, $205A4E71, $4E7147FA, $FEA4B702
00000E28 D402 4EFB 204A 4E71 4E71+  	dc.l	$D4024EFB, $204A4E71, $4E7147FA, $FE54B702, $D4024EFB, $203A5348, $4E7547FA, $FF2E7403
00000E48 C403 D442 4EFB 2028 4E71+  	dc.l	$C403D442, $4EFB2028, $4E714A40, $6B084A81, $67164EFA, $FF644EFA, $FF78265A, $10DB57CF
00000E68 FFFC 67D2 4E94 64F4 4E75+  	dc.l	$FFFC67D2, $4E9464F4, $4E755248, $6032504B, $321A4ED3, $584B221A, $4ED35547, $6028504B
00000E88 321A 6004 584B 221A 6A08+  	dc.l	$321A6004, $584B221A, $6A084481, $10FC002D, $600410FC, $002B51CF, $00064E94, $65CA4ED3
00000EA8 51CF FFC6 4ED4 6506 5248+  	dc.l	$51CFFFC6, $4ED46506, $524810D9, $4E755447, $53494ED4, $4BF900C0, $00044DED, $FFFC4A51
00000EC8 6B10 2A99 41D2 3818 4EBA+  	dc.l	$6B102A99, $41D23818, $4EBA023C, $43E90020, $60EC5449, $2ABCC000, $00007000, $76033C80
00000EE8 3419 3C82 3419 6AFA 7200+  	dc.l	$34193C82, $34196AFA, $72004EBB, $204C51CB, $FFEE2A19, $200B4840, $024000FF, $00405D00
00000F08 4840 2640 4E63 26C5 26C5+  	dc.l	$48402640, $4E6326C5, $26C526D9, $26D92A85, $70003219, $61122ABC, $40000000, $72006108
00000F28 3ABC 8174 2A85 4E75 2C80+  	dc.l	$3ABC8174, $2A854E75, $2C802C80, $2C802C80, $2C802C80, $2C802C80, $51C9FFEE, $4E754CAF
00000F48 0003 0004 48E7 6010 4E6B+  	dc.l	$00030004, $48E76010, $4E6B240B, $48424202, $0C425D00, $661C342B, $00040242, $E000C2EB
00000F68 000E D441 D440 D440 3682+  	dc.l	$000ED441, $D440D440, $36823742, $0004504B, $36DB4CDF, $08064E75, $2F0B4E6B, $200B4840
00000F88 4200 0C40 5D00 6612 7200+  	dc.l	$42000C40, $5D006612, $72003213, $02411FFF, $82EB000E, $20014840, $E248265F, $4E752F0B
00000FA8 2F00 4E6B 200B 4840 4200+  	dc.l	$2F004E6B, $200B4840, $42000C40, $5D006616, $302B0004, $D06B000E, $02405FFF, $36803740
00000FC8 0004 504B 36DB 201F 265F+  	dc.l	$0004504B, $36DB201F, $265F4E75, $2F0B2F00, $4E6B200B, $48404200, $0C405D00, $66043741
00000FE8 000C 201F 265F 4E75 2F0B+  	dc.l	$000C201F, $265F4E75, $2F0B2F00, $4E6B200B, $48404200, $0C405D00, $6606504B, $36C136C1
00001008 201F 265F 4E75 61C4 487A+  	dc.l	$201F265F, $4E7561C4, $487AFF94, $48E77F12, $4E6B240B, $48424202, $0C425D00, $66282A1B
00001028 2E1B 4C93 005C 4846 4DF9+  	dc.l	$2E1B4C93, $005C4846, $4DF900C0, $00002D45, $00044845, $72001218, $6E126B32, $4893001C
00001048 4845 48E3 0500 4CDF 48FE+  	dc.l	$484548E3, $05004CDF, $48FE4E75, $51CB0012, $D642DE86, $0887001D, $2D470004, $2A074845
00001068 D244 3C81 5445 7200 1218+  	dc.l	$D2443C81, $54457200, $12186EE0, $67CE0241, $001E4EFB, $1002DE86, $721D0387, $6020602A
00001088 602E 6036 603E 1418 6014+  	dc.l	$602E6036, $603E1418, $60141818, $60D8603A, $1218D241, $76804843, $CE834841, $8E813602
000010A8 2D47 0004 2A07 4845 60BC+  	dc.l	$2D470004, $2A074845, $60BC0244, $9FFF60B6, $02449FFF, $00442000, $60AC0244, $9FFF0044
000010C8 4000 60A2 0044 6000 609C+  	dc.l	$400060A2, $00446000, $609C3F04, $1E98381F, $6094487A, $FECA2F0C, $49FA0016, $4FEFFFF0
000010E8 41D7 7E0E 4EBA FCF4 4FEF+  	dc.l	$41D77E0E, $4EBAFCF4, $4FEF0010, $285F4E75, $42184447, $0647000F, $90C72F08, $4EBAFF0E
00001108 205F 7E0E 4E75 741E 1018+  	dc.l	$205F7E0E, $4E75741E, $10181200, $E609C242, $3CB11000, $D000C042, $3CB10000, $51CCFFEA
00001128 4E75 487A 0056 2F0C 49FA+  	dc.l	$4E75487A, $00562F0C, $49FA0016, $4FEFFFF0, $41D77E0E, $4EBAFCA4, $4FEF0010, $285F4E75
00001148 4218 4447 0647 000F 90C7+  	dc.l	$42184447, $0647000F, $90C72F08, $2F0D4BF9, $00C00004, $3E3C9E00, $60023A87, $1E186EFA
00001168 6710 0407 00E0 67F2 0C07+  	dc.l	$67100407, $00E067F2, $0C070010, $6DEE5248, $60EA2A5F, $205F7E0E, $4E7533FC, $9E0000C0
00001188 0004 4E75 487A FFF4 3F07+  	dc.l	$00044E75, $487AFFF4, $3F072F0D, $4BF900C0, $00043E3C, $9E006002, $3A871E18, $6EFA6710
000011A8 0407 00E0 67F2 0C07 0010+  	dc.l	$040700E0, $67F20C07, $00106DEE, $524860EA, $2A5F3E1F, $4E7546FC, $27004FEF, $FFF048E7
000011C8 FFFE 47EF 003C 4EBA F502+  	dc.l	$FFFE47EF, $003C4EBA, $F5024EBA, $F3F04CDF, $7FFF487A, $F3CE2F2F, $00144E75, $48E7C456
000011E8 4E6B 200B 4840 4200 0C40+  	dc.l	$4E6B200B, $48404200, $0C405D00, $66124BF9, $00C00004, $4DEDFFFC, $43FAF558, $4EBAFCF4
00001208 4CDF 6A23 4E75 48E7 C0D0+  	dc.l	$4CDF6A23, $4E7548E7, $C0D04E6B, $200B4840, $42000C40, $5D00660C, $3F3C0000, $610C610A
00001228 67FC 544F 4CDF 0B03 4E75+  	dc.l	$67FC544F, $4CDF0B03, $4E756174, $41EF0004, $43F900A1, $00036178, $70F0C02F, $00054E75
00001248 48E7 FFFE 3F3C 0000 61E0+  	dc.l	$48E7FFFE, $3F3C0000, $61E04BF9, $00C00004, $4DEDFFFC, $61D467F2, $6B4041FA, $00765888
00001268 D000 64FA 2010 6F32 2040+  	dc.l	$D00064FA, $20106F32, $20404FEF, $FFF043FA, $F4E647D7, $2A3C4000, $00034EBA, $FC782ABC
00001288 8230 8406 2A85 487A 000C+  	dc.l	$82308406, $2A85487A, $000C4850, $4CEF7FFF, $00164E75, $4FEF0010, $60B02ABA, $F47A60AA
000012A8 41F9 00C0 0004 44D0 6BFC+  	dc.l	$41F900C0, $000444D0, $6BFC44D0, $6AFC4E75, $12BC0000, $4E7172C0, $1011E508, $12BC0040
000012C8 4E71 C001 1211 0201 003F+  	dc.l	$4E71C001, $12110201, $003F8001, $46001210, $B10110C0, $C20010C1
000012E0 4E75                       	dc.w	$4E75
000012E2 0000 0000 0000 0000 0000+  	dc.l	DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER, DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER, DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER, $48E700FE, $41FA002A, $4EBAFD1C, $49D77C06, $3F3C2000
00001302 2F3C E861 303A 41D7 221C+  	dc.l	$2F3CE861, $303A41D7, $221C4EBA, $F32C522F, $000251CE, $FFF24FEF, $00224E75, $E0FA01F0
00001322 26EA 4164 6472 6573 7320+  	dc.l	$26EA4164, $64726573, $73205265, $67697374, $6572733A, $E0E00000, $41FA0088, $4EBAFCD4
00001342 2278 0000 5989 45D7 4EBA+  	dc.l	$22780000, $598945D7, $4EBAF284, $B3CA6570, $0C520040, $64642012, $67602040, $02400001
00001362 6658 1220 1020 0C00 0061+  	dc.l	$66581220, $10200C00, $00616604, $4A01663A, $0C00004E, $660A0201, $00F80C01, $0090672A
00001382 3020 0C40 6100 6722 1200+  	dc.l	$30200C40, $61006722, $12004200, $0C404E00, $66120C01, $00A8650C, $0C0100BB, $62060C01
000013A2 00B9 6606 0C60 4EB9 6610+  	dc.l	$00B96606, $0C604EB9, $66102F0A, $2F092208, $4EBAF28A, $225F245F, $548A548A, $B3CA6490
000013C2 4E75 E0FA 01F0 26EA 4261+  	dc.l	$4E75E0FA, $01F026EA, $4261636B, $74726163, $653AE0E0
000013D6 0000                       	dc.w	$0000
000013D8                            
000013D8                            ; ---------------------------------------------------------------
000013D8                            ; MD Debugger's exported symbols
000013D8                            ; ---------------------------------------------------------------
000013D8                            
000013D8 =00000482                  MDDBG__ErrorHandler: equ ErrorHandler+$0
000013D8 =000005AA                  MDDBG__Error_IdleLoop: equ ErrorHandler+$128
000013D8 =000005C4                  MDDBG__Error_InitConsole: equ ErrorHandler+$142
000013D8 =000005D0                  MDDBG__Error_MaskStackBoundaries: equ ErrorHandler+$14E
000013D8 =0000063A                  MDDBG__Error_DrawOffsetLocation: equ ErrorHandler+$1B8
000013D8 =0000063E                  MDDBG__Error_DrawOffsetLocation2: equ ErrorHandler+$1BC
000013D8 =00000644                  MDDBG__Error_DrawOffsetLocation__inj: equ ErrorHandler+$1C2
000013D8 =000006D2                  MDDBG__ErrorHandler_SetupVDP: equ ErrorHandler+$250
000013D8 =00000708                  MDDBG__ErrorHandler_VDPConfig: equ ErrorHandler+$286
000013D8 =0000071E                  MDDBG__ErrorHandler_VDPConfig_Nametables: equ ErrorHandler+$29C
000013D8 =0000075A                  MDDBG__ErrorHandler_ConsoleConfig_Initial: equ ErrorHandler+$2D8
000013D8 =0000075E                  MDDBG__ErrorHandler_ConsoleConfig_Shared: equ ErrorHandler+$2DC
000013D8 =0000078E                  MDDBG__Str_OffsetLocation_24bit: equ ErrorHandler+$30C
000013D8 =00000797                  MDDBG__Str_OffsetLocation_32bit: equ ErrorHandler+$315
000013D8 =000007D2                  MDDBG__Art1bpp_Font: equ ErrorHandler+$350
000013D8 =00000ACC                  MDDBG__GetSymbolByOffset: equ ErrorHandler+$64A
000013D8 =00000DE2                  MDDBG__FormatString: equ ErrorHandler+$960
000013D8 =00000EBC                  MDDBG__Console_Init: equ ErrorHandler+$A3A
000013D8 =00000EFA                  MDDBG__Console_Reset: equ ErrorHandler+$A78
000013D8 =00000EFC                  MDDBG__Console_InitShared: equ ErrorHandler+$A7A
000013D8 =00000F46                  MDDBG__Console_SetPosAsXY_Stack: equ ErrorHandler+$AC4
000013D8 =00000F4C                  MDDBG__Console_SetPosAsXY: equ ErrorHandler+$ACA
000013D8 =00000F80                  MDDBG__Console_GetPosAsXY: equ ErrorHandler+$AFE
000013D8 =00000FA6                  MDDBG__Console_StartNewLine: equ ErrorHandler+$B24
000013D8 =00000FD4                  MDDBG__Console_SetBasePattern: equ ErrorHandler+$B52
000013D8 =00000FF0                  MDDBG__Console_SetWidth: equ ErrorHandler+$B6E
000013D8 =0000100E                  MDDBG__Console_WriteLine_WithPattern: equ ErrorHandler+$B8C
000013D8 =00001010                  MDDBG__Console_WriteLine: equ ErrorHandler+$B8E
000013D8 =00001014                  MDDBG__Console_Write: equ ErrorHandler+$B92
000013D8 =000010DA                  MDDBG__Console_WriteLine_Formatted: equ ErrorHandler+$C58
000013D8 =000010DE                  MDDBG__Console_Write_Formatted: equ ErrorHandler+$C5C
000013D8 =0000110E                  MDDBG__Decomp1bpp: equ ErrorHandler+$C8C
000013D8 =0000112A                  MDDBG__KDebug_WriteLine_Formatted: equ ErrorHandler+$CA8
000013D8 =0000112E                  MDDBG__KDebug_Write_Formatted: equ ErrorHandler+$CAC
000013D8 =00001182                  MDDBG__KDebug_FlushLine: equ ErrorHandler+$D00
000013D8 =0000118C                  MDDBG__KDebug_WriteLine: equ ErrorHandler+$D0A
000013D8 =00001190                  MDDBG__KDebug_Write: equ ErrorHandler+$D0E
000013D8 =000011BE                  MDDBG__ErrorHandler_ConsoleOnly: equ ErrorHandler+$D3C
000013D8 =000011E4                  MDDBG__ErrorHandler_ClearConsole: equ ErrorHandler+$D62
000013D8 =0000120E                  MDDBG__ErrorHandler_PauseConsole: equ ErrorHandler+$D8C
000013D8 =00001248                  MDDBG__ErrorHandler_PagesController: equ ErrorHandler+$DC6
000013D8 =000012A8                  MDDBG__VSync: equ ErrorHandler+$E26
000013D8 =000012E2                  MDDBG__ErrorHandler_ExtraDebuggerList: equ ErrorHandler+$E60
000013D8 =000012EE                  MDDBG__Debugger_AddressRegisters: equ ErrorHandler+$E6C
000013D8 =0000133A                  MDDBG__Debugger_Backtrace: equ ErrorHandler+$EB8
000013D8                            
000013D8                            ; ---------------------------------------------------------------
000013D8                            ; WARNING!
000013D8                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
000013D8                            ;	Symbol data should be appended here after ROM is compiled
000013D8                            ;	by ConvSym utility, otherwise debugger modules won't be able
000013D8                            ;	to resolve symbol names.
000013D8                            ; ---------------------------------------------------------------
000013D8                            
000013D8                            ; --------------------------------------------------------------
000013D8                            ; WARNING!
000013D8                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
000013D8                            ;	Symbol data should be appended here after ROM is compiled
000013D8                            ;	by ConvSym utility, otherwise debugger modules won't be able
000013D8                            ;	to resolve symbol names.
000013D8                            ; --------------------------------------------------------------
000013D8                            
000013D8                            ; end of 'ROM'
000013D8                            EndOfRom:
000013D8                            
000013D8                            
